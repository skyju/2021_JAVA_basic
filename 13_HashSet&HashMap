import java.util.*;

public class BookEx11_22_HashSet_Bingo {
	public static void main(String[] args) {
		Set set = new HashSet(); //중복은 허용하지 않음. 순서는 없음
//		Set set = new LinkedHashSet();
		int[][] board = new int [5][5]; //int 2차원 배열을 만듦. 크기는 5x5
		
		for(int i = 0 ; set.size() < 25 ; i++) { //set사이즈가 25보다 작을 때까지 i가 0 부터 증가하며 
			set.add((int)(Math.random()*50)+1+""); //set에 랜덤한 0보다 큰 2글자 랜덤숫자가 스트링으로 들어감
		}
		
		Iterator itr = set.iterator();
		for(int i = 0 ; i < board.length; i++) {
			for(int j = 0 ; j < board[i].length ; j++) { //배열에 있는 값 전부꺼냄.
				board[i][j] = Integer.parseInt((String)itr.next()); 
				//2차원 배열에 set에 있는 25개의 스트링이 int로 바뀌어 순차적으로 들어감. i = 0 행부터
				System.out.print((board[i][j] < 10 ? "  ": " ")+board[i][j]);
				//바로 출력하는데, 한글자와 두글자 크기를 맞추기 위해 임의 패딩으로 빈문자열을 줌
			}
			System.out.println();
		}
	}
}
//===========================================================================
/**
 * set은 원래 중복값을 허용하지 않는다.
 * 그러나 인스턴스를 넣으면  중복값이라고 인식하지 않음.
 * 이를 해결하기 위해서는 해당 인스턴의 
 * equals와 hashCode를 overriding해야 한다.
 * 
 * 이것이 가능한 이유?
 * HashSet의 add메서드는 새 요소를 추가하기 전에 저장된 요소와 중복되는 지 판별하기 위해
 * equals()와 hashCode()를 호출하기 때문에!
 */
 
import java.util.*;

public class BookEx11_23_HashSet {
	public static void main(String[] args) {
		HashSet set = new HashSet();
		
		set.add("abc");
		set.add("abc");
		set.add(new Person2("David",10));
		set.add(new Person2("David",10));
		
		System.out.println(set);
	}
}

class Person2 {
	String name;
	int age;
	
	Person2(String name, int age) {
		this.name = name;
		this.age = age;
	}
	public String toString() {
		return name + ":" + age;
	}
	
	//=======Overriding=======
	public boolean equals (Object obj) {
		if(obj instanceof Person2) {
			Person2 tmp = (Person2) obj;
			return name.equals(tmp.name) && age == tmp.age; //name과 age가 같으면 같은 것으로 간주하도록.
		}
		return false;
	}
	
	public int hashCode() {
		return Objects.hash(name+age);//name과 age가 같으면 같은 hash값을 반환한다.
	}
}
//===========================================================================


import java.util.*;

public class BookEx11_30_HashMap_LOGIN {
	public static void main(String[] args) {
		HashMap map = new HashMap();
		/*put(key값,value값)*/
		map.put("myId", "1234");
		map.put("asdf", "1111");
		map.put("asdf", "1234");
		
		Scanner scanner = new Scanner(System.in);
		
		while(true) {
			System.out.println("id와 password를 입력해주세요.");
			System.out.print("id:");
			String id = scanner.nextLine().trim();
			System.out.print("password:");
			String password = scanner.nextLine().trim();
			
			System.out.println();
			
			if(!map.containsKey(id)) { //map에 입력된 값이 존재하지 않으면
				System.out.println("입력하신 id는 존재하지 않습니다. 다시 입력해주세요.");
				continue;
			}
			if(!map.get(id).equals(password)) { //key값과 value값의 pair가 맞는지 확인하는 법
				System.out.println("비밀번호가 일치하지 않습니다. 다시 입력해주세요.");
			} else {
				System.out.println("id와 비밀번호가 일치합니다.");
				break;
			}
			
		}
	}
}

//===========================================================================


import java.util.*;

public class BookEx11_31_HashMap {
	public static void main(String[] args) {
		HashMap map = new HashMap();
		map.put("김자바", 100);
		map.put("이자바", 100);
		map.put("강자바", 80);
		map.put("안자바", 90);
		
		/*entrySet: hashMap에 저장된 키와 값을 엔트리(키와 값의 결합)의 형태로 set에 저장*/
		Set set = map.entrySet();
		
		Iterator itr = set.iterator(); //set을 출력하기 위해 준비
		while(itr.hasNext()) { //set에 뭐가 남아 있을 때 까지
			Map.Entry e = (Map.Entry)itr.next();
			System.out.println("이름: "+e.getKey()+", 점수: "+e.getValue());
			//entry안에 get함수가 있음
		}
		
		/*keySet: hashMap에 저장된 모든 키가 저장된 set을 반환*/
		set = map.keySet();
		System.out.println("참가자 명단: "+set);
		
		Collection values = map.values();
		itr = values.iterator();
		int total = 0;
		
		while(itr.hasNext()) {
			Integer i = (Integer)itr.next();
			total += i.intValue();
		}
		
		System.out.println("총점: "+total);
		System.out.println("평균: "+(float)total/set.size());
		System.out.println("최고점수: "+Collections.max(values));
		System.out.println("최저점수: "+Collections.min(values));
		
	}
}

