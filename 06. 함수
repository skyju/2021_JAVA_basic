package com;
	
	public class SampleApp01 {//<- 정의한다.
		public static void main(String[] args) {// ;<--선언
			// 실행 내용 - 함수 중괄호 안에 모두 적는다.
			System.out.println ("main-before");
			fun01(); // 함수를 호출한다. / 뭐든 간에 메인함수 위주
			// 다른 함수 안에선 함수를 선언, 정의 할 수없고 호출만 가능
			// 정적 함수는 정적(static)만 사용할 수 있다.
			
			//화면에 출력하기 : 어디에(콘솔 화면), 무엇을(문자열 "")을 먼저 생각해보기.
			System.out.println ("main-after");
			//출력장치(System), 콘솔화면에(out), println이라는 명령이라는 하면 괄호안을 보여줘라는 명령
			
		}
		// 함수를 정의하기
		// [속성] 자료형 함수명(매개변수 선언){
		// 지역변수 선언 }
		static void fun01(/*외부-호출측-로부터 받을 값이 있을 때 변수를 선언*/) {
			System.out.println ("fun01-called");
		}
		
		/**
		 * 함수 안에서 선언되는 변수들: 지역변수
		 * 	1. 함수 호출 시 생성{
		 * 	2. 함수 종료 시 소멸}
		 * 	3. 지역 내에서 직접 접근 가능 - 변수 명이 보인다.
		 * 
		 * enter key: \n
		 * 커서가 행의 가장 첫번 째로 댕겨짐-enter: \r
		 * 실질적인 enter key는 '\r\n'
		 */

		/* 필드로 선언한다. (이 클래스 안에 모든 함수들이 사용)
		 * 1. 함수들이 서로 호출된다. -> 전달, 반환하면서 동작
		 * 2. data들을 서로 공유, 주고받는 처리
		 */
		public static int code = 100; //필드변수

		public static void main(String[] args) {
			code = 100; //static으로 지정된 메인에서는 모두 static으로 선언되어있어야 함
	//		af(code); //전달,반환 필요없이 바로 사용 가능
	//		bf(code);
	//		cf(code);

			int rt = edit(100); //edit함수에게 100을 전달하고 반환값을 받는다.
			System.out.println(rt);
			/*
			 * 반환 받을 값이 여러 개인 경우: 1개만 반환 가능(문법)
			 * int a,b = edit(); >이런 표현 불가능
			 * 자료구조로 담아서 반환한다. : 배열, 리스트, 맵
			 */
		}
		public static void main01(String[] args) {
			int mainv = 10;
			//직접 접근: 변수명을 사용할 수 있다. resolved
			System.out.println(mainv);
			mainv = edit(30);
			System.out.println(mainv);
			/*
			 * 메인에서 다른 함수를 호출할 수는 있지만, 피호출함수의 지역변수를 바로 쓸 수 없다.
			 * 메인함수에서 다른 함수를 호출할 때 메인이 가진 변수를 함수값으로 전달할 수 있음
			 * 호출 함수가 피호출 함수에게 값을 준다, 전달한다 (전달한다는 것은 호출자가 피호출자에게 주는 것)
			 */
		}	
			/*
			 * 매개변수: 호출함수로부터 받을 값을 저장하는 변수, 매개변수 역시 이 함수의 지역변수
			 * 호출 될 때 parameter 변수에 대입받는다 ; 사본<->mainv가 원본
			 * parameter=mainv; 복사한다
			 */
		private static int edit(int param) {//void는 반환하지 않겟다는 것이니까, 반환할 값에 맞는 자료형으로 변경해야함
			/*
			 * 지역변수는 지역별로 독립적으로 사용되기 때문에 접근 불가
			 * 다른 지역에서 선언된 변수는 다름 함수에서 이름으로 사용할 수 없음
			 */
	//		System.out.println(mainv);
			System.out.println(param);
			param = 40; //피호출 함수가 원본을 수정할 수 없음
			return param; //변경된 값을 main에 저장하려면 반환해야함

			//전달(호출측)과 반환(피호출측)의 차이
		}
	}
